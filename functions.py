from random import choice
from aiogram.types import ReplyKeyboardMarkup, InputFile, MediaGroup, ParseMode
from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher.filters.state import StatesGroup, State

fruits = [
    "Apple",
    "Apricot",
    "Avocado",
    "Banana",
    "Blackberry",
    "Blueberry",
    "Cherry",
    "Coconut",
    "Cranberry",
    "Date",
    "Dragon Fruit",
    "Durian",
    "Fig",
    "Gooseberry",
    "Grape",
    "Grapefruit",
    "Guava",
    "Honeydew Melon",
    "Jackfruit",
    "Kiwi",
    "Lemon",
    "Lime",
    "Lychee",
    "Mango",
    "Mangosteen",
    "Melon",
    "Nectarine",
    "Orange",
    "Papaya",
    "Passion Fruit",
    "Peach",
    "Pear",
    "Pineapple",
    "Plum",
    "Pomegranate",
    "Raspberry",
    "Star Fruit",
    "Strawberry",
    "Tangerine",
    "Watermelon"
]

words = [
    "абажур", "абзац", "абонент", "абрикос", "авантюра", "август", "автобус", "автомобиль",
    "агент", "агрессия", "адрес", "академия", "аквариум", "аккорд", "акробат", "алгоритм",
    "аллея", "альбом", "алюминий", "амбиция", "аметист", "анализ", "анекдот", "антипатия",
    "аплодисменты", "аптека", "арбитр", "арбуз", "арка", "аромат", "артист", "архив",
    "асфальт", "атака", "атлас", "атом", "аудитория", "афиша", "бабочка", "багаж",
    "баланс", "балкон", "бамбук", "банан", "банк", "барьер", "баскетбол", "батарея",
    "бегемот", "бегство", "бедствие", "безопасность", "бензин", "берег", "береза",
    "бетон", "биография", "бисквит", "битва", "благодарность", "близнецы", "блокнот",
    "богатство", "бокал", "болезнь", "болото", "борьба", "ботаника", "боязнь", "браслет",
    "брат", "бревно", "бриллиант", "бровь", "бросок", "брусника", "бублик", "бюро",
    "вагон", "валюта", "ванна", "вариант", "введение", "век", "велосипед", "вентилятор",
    "веревка", "верность", "вертолет", "веселка", "весть", "ветвь", "ветер", "взрыв",
    "вилка", "виноград", "витамин", "вишня", "влияние", "вода", "вокзал", "волна",
    "ворота", "воспитание", "восторг", "впечатление", "врач", "время", "всеобщее",
    "вспышка", "выбор", "выгода", "выезд", "выражение", "выставка", "выступление",
    "газета", "галерея", "гарантия", "гардероб", "гвоздь", "гений", "гепард", "герой",
    "гимнастика", "глаз", "глина", "глобус", "глубина", "гнездо", "гном",
    "голос", "гора", "горилла", "горка", "горшок", "гостиница", "гость", "гранат",
    "граница", "график", "гребень", "гриб", "гром", "грусть", "губа", "гусь"
]

Cities = ['Абзаково', 'Абрау-Дюрсо', 'Агой', 'Адлер', 'Азов', 'Александров', 'Алупка', 'Алушта', 'Анапа',
          'Архангельск', 'Архипо-Осиповка', 'Архыз', 'Астрахань', 'Балтийск', 'Барнаул', 'Бахчисарай', 'Белогорск',
          'Белокуриха', 'Береговое', 'Бетта', 'Благовещенская', 'Большой Утриш', 'Великий Новгород',
          'Великий Устюг', 'Веселовка', 'Витязево', 'Владивосток', 'Владикавказ', 'Владимир', 'Волгоград',
          'Вологда', 'Выборг', 'Вышний Волочек', 'Вязьма', 'Гаврилов Посад', 'Гаспра', 'Гатчина', 'Геленджик',
          'Голубицкая', 'Горно-Алтайск', 'Горячий Ключ', 'Грозный', 'Гурзуф', 'Дагомыс', 'Дарасун', 'Дербент',
          'Джанхот', 'Джемете', 'Джубга', 'Дивеево', 'Дивноморское', 'Дмитров', 'Должанская', 'Домбай', 'Евпатория',
          'Ейск', 'Екатеринбург', 'Елабуга', 'Ессентуки', 'Железноводск', 'Зарайск', 'Звенигород', 'Зеленоградск',
          'Золотое', 'Ивангород', 'Иваново', 'Ижевск', 'Избербаш', 'Иркутск', 'Истра', 'Йошкар-Ола', 'Кабардинка',
          'Казань', 'Калининград', 'Калуга', 'Калязин', 'Касимов', 'Каспийск', 'Каякент', 'Кемерово',
          'Керчь', 'Кинешма', 'Киров', 'Кировск', 'Кисловодск', 'Коктебель', 'Коломна', 'Кореиз', 'Кострома',
          'Красная Поляна', 'Краснодар', 'Красноярск', 'Криница', 'Кронштадт', 'Кудепста', 'Курган', 'Курск',
          'Кучугуры', 'Лазаревское', 'Лахденпохья', 'Лермонтово', 'Лоо', 'Магас', 'Майкоп', 'Манжерок',
          'Марциальные Воды',
          'Махачкала', 'Мацеста', 'Межводное', 'Мезмай', 'Мисхор', 'Морское', 'Москва', 'Мурманск', 'Муром', 'Мысовое',
          'Мышкин',
          'Находка', 'Небуг', 'Нижний Новгород', 'Николаевка', 'Новая Анапа', 'Новая Евпатория', 'Новомихайловский',
          'Новороссийск', 'Новосибирск', 'Новый Свет', 'Оленевка', 'Ольгинка', 'Орджоникидзе', 'Оренбург', 'Палех',
          'Паратунка', 'Партенит', 'Переславль-Залесский', 'Пересыпь', 'Пермь', 'Петергоф', 'Петрозаводск',
          'Петропавловск-Камчатский', 'Плес', 'Поповка', 'Поселок За Родину', 'Поселок Ильич', 'Прасковеевка',
          'Приморский', 'Приморско-Ахтарск', 'Приозерск', 'Псков', 'Пятигорск', 'Ржев', 'Ростов Великий',
          'Ростов-на-Дону', 'Рыбачье',
          'Рыбинск', 'Рязань', 'Саки', 'Самара', 'Санкт-Петербург', 'Саратов', 'Светлогорск', 'Свияжск', 'Севастополь',
          'Семибалки',
          'Сергиев Посад', 'Серпухов', 'Симеиз', 'Симферополь', 'Смоленск', 'Солнечногорское', 'Сортавала', 'Сочи',
          'Ставрополь',
          'Старая Ладога', 'Старая Русса', 'Судак', 'Суздаль', 'Сукко', 'Таганрог', 'Тамань', 'Таруса', 'Тверь',
          'Темрюк', 'Териберка',
          'Тобольск', 'Томск', 'Торжок', 'Туапсе', 'Тула', 'Тутаев', 'Тюмень', 'Углич', 'Улан-Удэ', 'Ульяновск', 'Уфа',
          'Феодосия', 'Форос',
          'Хабаровск', 'Ханты-Мансийск', 'Хоста', 'Царское Село', 'Чебоксары', 'Челябинск', 'Черноморское', 'Шепси',
          'Шерегеш',
          'Широкая Балка', 'Шлиссельбург', 'Штормовое', 'Шуя', 'Щелкино', 'Эсто-Садок', 'Южная Озереевка',
          'Южно-Сахалинск',
          'Юрьев-Польский', 'Якорная Щель', 'Ялта', 'Ярославль', 'Новошахтинск', 'Гуково', 'Краснодон']

users = {
    'User': ['Anagramm_word', 'Scrable_Score', ["City_Words", '']]
}


class Form(StatesGroup):
    Anagramms = State()
    Scrable = State()
    Cities = State()


markup = types.InlineKeyboardMarkup(row_width=True)
ik1 = types.InlineKeyboardButton(text='Aнаграммы', callback_data='Anagramms')
ik2 = types.InlineKeyboardButton(text='Скрабл', callback_data='Scrable')
ik3 = types.InlineKeyboardButton(text='Города', callback_data='City')
markup.add(ik1, ik2, ik3)


def Get_City(msg, user_id):
    for city in Cities:
        if msg.lower() == city.lower():
            for element in users[user_id][2]:
                if msg.lower() == element.lower():
                    return 'error'

            else:
                if users[user_id][2][-1].lower() == '' or users[user_id][2][-1][-1].lower() == msg[0].lower():
                    result = [] # Пока что создаем пустой result для хранения подходящих городов
                    for city in Cities:
                        if msg[-1] == 'ь' or msg[-1] == 'ы':
                            if city[0].lower() == msg[-2].lower(): # Если true, добавляем города, которые начинаются на
                                result.append(city)                # предпоследнюю букву введенного города (msg[-2])

                        if city[0].lower() == msg[-1].lower(): # Если введенный город не оканчивается на ь или ы, добавляем в список города,
                            result.append(city)                # которые начинаются на последнюю букву введенного города (msg[-1]).

                    while True:
                        word = choice(result)
                        for i in users[user_id][2]:
                            if word == i:
                                pass
                        else:
                            users[user_id][2].append(msg)
                            users[user_id][2].append(word)

                            break
                    return users[user_id][2][-1]

                """для бота проверка"""
                if users[user_id][2][-1].lower() == '' or users[user_id][2][-1][-2].lower() == msg[0].lower():
                    result = []
                    for city in Cities:
                        if city[0].lower() == msg[-1].lower():
                            result.append(city)
                        if msg[-1] == 'ь' or msg[-1] == 'ы':
                            if city[0].lower() == msg[-2].lower():
                                result.append(city)

                    while True:
                        word = choice(result)
                        for i in users[user_id][2]:
                            if word == i:
                                pass
                        else:
                            users[user_id][2].append(msg)
                            users[user_id][2].append(word)

                            break
                    return users[user_id][2][-1]
