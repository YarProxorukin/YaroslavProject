from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import shuffle
from functions import *

TOKEN = '6738768458:AAEl0eYCeWBbpOSPe3b8dHBRkhGiUamDTVQ'  # –¢–æ–∫–µ–Ω –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–æ—Ç–∞

bot = Bot(token=TOKEN)  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
dp = Dispatcher(bot, storage=MemoryStorage())  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
@dp.message_handler(text=['/start'])
async def StartFunction(message: types.Message):
    users[message.from_user.id] = ['', 0, ['', '']] # –ê–Ω–∞–≥—Ä–∞–º–º—ã, –ß–∏—Å–ª–æ –¥–ª—è —Å–∫—Ä–∞–±–ª–∞, –≥–æ—Ä–æ–¥–∞

    await message.answer(
        f'üëã –ü—Ä–∏–≤–µ—Ç, {(message.from_user.first_name).upper()}!\n\n–≠—Ç–æ <b>GameBotü§ñ</b>\n\n'
        f'<b>–Ø —É–º–µ—é:</b>\n\n<i>1) –ò–≥—Ä–∞—Ç—å –≤ —Å–∫—Ä–∞–±–ªüî¢\n\n'
        f'2) –ò–≥—Ä–∞—Ç—å –≤ –∞–Ω–∞–≥—Ä–∞–º–º—ãüé≠\n\n'
        f'3) –ò–≥—Ä–∞—Ç—å –≤ –≥–æ—Ä–æ–¥–∞üèôÔ∏è</i>\n\n<b>'
        f'<i>–í–æ —á—Ç–æ –ø–æ–∏–≥—Ä–∞–µ–º?</i></b>',
        parse_mode=ParseMode.HTML, reply_markup=markup)

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
@dp.message_handler(text=['/help'])
async def StartFunction(message: types.Message):
    await message.answer(
        '<b>-----–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã----</b>\n\n'

        '<b>–ê–Ω–∞–≥—Ä–∞–º–º—ã:</b>\n\n'
        '<i>1. –¶–µ–ª—å –∏–≥—Ä—ã: –°–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ —Å–ª–æ–≤ –∏–∑ –±—É–∫–≤ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞. \n'
        '2. –ü—Ä–∞–≤–∏–ª–∞:\n'
        '    –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞.\n'
        '     –ö–∞–∂–¥–∞—è –±—É–∫–≤–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –∫–∞–∂–¥–æ–º –Ω–æ–≤–æ–º —Å–ª–æ–≤–µ.\n'
        '     –°–ª–æ–≤–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —á–∏—Å–ª–∞ (–µ—Å–ª–∏ –Ω–µ –æ–≥–æ–≤–æ—Ä–µ–Ω–æ –∏–Ω–æ–µ).\n'
        '     –ü–æ–±–µ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫, —Å–æ—Å—Ç–∞–≤–∏–≤—à–∏–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ —Å–ª–æ–≤.</i>\n\n'

        '<b>–°–∫—Ä–∞–±–ª:</b>\n\n'
        '<i>1. –¶–µ–ª—å –∏–≥—Ä—ã: –ù–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤, —á–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫, —Å–æ—Å—Ç–∞–≤–ª—è—è —Å–ª–æ–≤–∞ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ç–µ–º—É.\n'
        '2. –ü—Ä–∞–≤–∏–ª–∞:\n'
        '    –ò–≥—Ä–æ–∫—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞: "–§—Ä—É–∫—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ".\n'
        '     –û–Ω –¥–æ–ª–∂–µ–Ω –ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∑–Ω–∞–∫–æ–º—ã—Ö –µ–≥–æ —Ñ—Ä—É–∫—Ç–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.</i>\n\n'

        '<b>–ì–æ—Ä–æ–¥–∞:</b>\n\n'

        '<i>1. –¶–µ–ª—å –∏–≥—Ä—ã: –ù–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n'
        '2. –ü—Ä–∞–≤–∏–ª–∞:\n'
        '    –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ª—é–±–æ–≥–æ –≥–æ—Ä–æ–¥–∞.\n'
        '     –°–ª–µ–¥—É—é—â–∏–π –∏–≥—Ä–æ–∫ –¥–æ–ª–∂–µ–Ω –Ω–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –±—É–∫–≤—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞.\n'
        '     –ì–æ—Ä–æ–¥–∞ –Ω–µ –º–æ–≥—É—Ç –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è.\n'
        '     –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –Ω–∞–∑–≤–∞—Ç—å –≥–æ—Ä–æ–¥, –æ–Ω –≤—ã–±—ã–≤–∞–µ—Ç.\n'
        '     –ü–æ–±–µ–∂–¥–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Å—Ç–∞–≤—à–∏–π—Å—è –∏–≥—Ä–æ–∫.</i>\n', parse_mode=ParseMode.HTML, reply_markup=markup)

"""–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –∏ –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
@dp.callback_query_handler()
async def CheckMessage(message: types.CallbackQuery):
    callback = message.data
    await bot.delete_message(message.from_user.id, message.message.message_id)

    if callback == 'City':
        await bot.send_message(message.from_user.id,
           f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É:\n –ì–æ—Ä–æ–¥–∞ –†–æ—Å—Å–∏–∏\n"
           f"\n–ù–∞—á–∏–Ω–∞–π—Ç–µ –ø–µ—Ä–≤—ã–º... üí¨‚úç")
        await Form.Cities.set()

    if callback == 'Anagramms':
        users[message.from_user.id][0] = ''

        await message.answer("–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –ø—Ä–∏–¥—É–º—ã–≤–∞—é —Å–ª–æ–≤–æ! ü§ñ")
        await message.answer("‚è≥")

        word = choice(words)
        users[message.from_user.id][0] += word

        await bot.send_message(message.from_user.id,
           f"–í—Å—ë, —è –ó–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ‚úç \n\n"
           f"–ü–æ—Å–º–æ—Ä–∏—à—å –æ—Ç–≤–µ—Ç, –∫–æ–≥–¥–∞ —Å–¥–∞—à—å—Å—è ü´° "
           f"\n<tg-spoiler>ü´µüëÅ\n{word}</tg-spoiler>",
           parse_mode=ParseMode.HTML)

        word_shuffled = list(word)
        shuffle(word_shuffled)
        shuffled_word = ''.join(word_shuffled)

        await bot.send_message(message.from_user.id,
           f"–í–æ—Ç –ê–Ω–∞–≥—Ä–∞–º–º–∞: "
           f"\n\n\t{shuffled_word}\n\n"
           f"–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞–ª ü§ñ"
           f"\n\n–£–¥–∞—á–∏! üëÄ‚úä")

        await Form.Anagramms.set()

    if callback == 'Scrable':
        await bot.send_message(message.from_user.id,
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É –°–∫—Ä–∞–±–ª! üî†\n\n"
            f"<b>–¢–µ–º–∞:</b> –§—Ä—É–∫—Ç—ã –Ω–∞ –∞–Ω–≥. —è–∑ üë®‚Äçüç≥\n"
            f"\n<i>–ù–∞—á–Ω–µ–º ...</i> \n\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ ‚úçÔ∏è",
            parse_mode=ParseMode.HTML)
        await Form.Scrable.set()

"""–í—ã–∑–æ–≤ –∞–Ω–∞–≥—Ä–∞–º–º—ã"""
@dp.message_handler(state=Form.Anagramms)
async def adc_function(message: types.Message, state: FSMContext):
    msg = message.text

    if msg.lower() == '—Å—Ç–æ–ø':
        gif = open('GIF/Otmena.mp4', 'rb')
        await message.reply_animation(animation=gif, caption=
        f"–ú–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É ü§ñ\n"
        f"\n1)  /help   -   –ü–æ–º–æ—â—å üë®‚Äçüè´\n",
        reply_markup=markup)

        await state.finish()

    if msg.lower() == users[message.from_user.id][0].lower(): # –°—é–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Å–ª–æ–≤–æ, –≤—ã–≤–µ–¥–µ–Ω–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–æ–π
        await message.answer("–í–µ—Ä–Ω–æ! –£–≥–∞–¥–∞–ª! üòÑüéñ")
        await message.answer("‚úÖ")

        users[message.from_user.id][0] = ''  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ
        word = choice(words)
        users[message.from_user.id][0] += word

        await message.answer(
            f"–í—Å—ë, —è –ó–∞–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ ‚úç \n\n"
            f"–ü–æ—Å–º–æ—Ä–∏—à—å –æ—Ç–≤–µ—Ç, –∫–æ–≥–¥–∞ —Å–¥–∞—à—å—Å—è ü´° "
            f"\n<tg-spoiler>ü´µüëÅ\n{word}</tg-spoiler>",
            parse_mode=ParseMode.HTML
        )

        word_shuffled = list(word)
        shuffle(word_shuffled)
        shuffled_word = ''.join(word_shuffled)

        await message.answer(
            f"–í–æ—Ç –ê–Ω–∞–≥—Ä–∞–º–º–∞: "
            f"\n\n\t{shuffled_word}\n\n"
            f"–£–≥–∞–¥–∞–π —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–≥–∞–¥–∞–ª ü§ñ"
            f"\n\n–£–¥–∞—á–∏! üëÄ‚úä"
            f"\n–ù–∞–ø–∏—à–∏—Ç–µ   ==  ‚≠ïÔ∏è<b><u><code>–°—Ç–æ–ø</code></u></b>‚≠ïÔ∏è  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏ ",
            parse_mode = ParseMode.HTML
        )

    else:
        if msg.lower() != '—Å—Ç–æ–ø':
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω–æ, —è —Ç–∞–∫–æ–≥–æ –Ω–µ –∑–∞–≥–∞–¥—ã–≤–∞–ª! üò°\n"
                f"\n–ù–∞–ø–∏—à–∏—Ç–µ   ==  ‚≠ïÔ∏è<b><u><code>–°—Ç–æ–ø</code></u></b>‚≠ïÔ∏è  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏ ",
                parse_mode=ParseMode.HTML
            )

"""—ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–∫—Ä–∞–±–ª–∞"""
@dp.message_handler(state=Form.Scrable)
async def adc_function(message: types.Message, state: FSMContext):
    msg = message.text

    if msg.lower() == '—Å—Ç–æ–ø':
        gif = open('GIF/Otmena.mp4', 'rb')
        await message.reply_animation(animation=gif, caption=
        f"–ú–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É ü§ñ\n"
        f"\n1)/help   -   –ü–æ–º–æ—â—å üë®‚Äçüè´\n",
        reply_markup=markup)

        await state.finish()

    for fruit in fruits:
        if msg.lower() == fruit.lower():
            users[message.from_user.id][1] += 3

            await message.answer(
                f"–•–æ—Ä–æ—à–æ! –°–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ\n"
                f"\n<b><i>–í–∞—à–µ –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤::</i></b>  <code>{users[message.from_user.id][1]}</code>   üëç",
                parse_mode=ParseMode.HTML
            )
            break
    else:
        if msg.lower() != '—Å—Ç–æ–ø':
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω–æ, —è —Ç–∞–∫–æ–≥–æ —Ñ—Ä—É–∫—Ç–∞ –Ω–µ –∑–Ω–∞—é! üò°\n"
                f"\n–ù–∞–ø–∏—à–∏—Ç–µ   ==  ‚≠ïÔ∏è<b><u><code>–°—Ç–æ–ø</code></u></b>‚≠ïÔ∏è  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏ ",
                parse_mode=ParseMode.HTML
            )

"""–≠—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω—É–∂–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤"""
@dp.message_handler(state=Form.Cities)
async def adc_function(message: types.Message, state: FSMContext):
    msg = message.text

    if msg.lower() == '—Å—Ç–æ–ø':
        gif = open('GIF/Otmena.mp4', 'rb')
        await message.reply_animation(animation=gif, caption=
        f"–ú–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∏–≥—Ä—É ü§ñ\n"
        f"\n1)  /help   -   –ü–æ–º–æ—â—å üë®‚Äçüè´\n",
        reply_markup=markup)

        await state.finish()

    try:
        word = Get_City(msg=msg, user_id=message.from_user.id)
        if word == 'error':
            await message.answer(
                f"–ù–µ–≤–µ—Ä–Ω–æ, –≥–æ—Ä–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è! üò°\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ   ==  ‚≠ïÔ∏è<b><u><code>–°—Ç–æ–ø</code></u></b>‚≠ïÔ∏è  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏ ",
                parse_mode=ParseMode.HTML
            )
        else:
            await message.answer(word)
    except:
        await message.answer(
            f"–ù–µ–≤–µ—Ä–Ω–æ, —è —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –∑–Ω–∞—é! üò°\n"
            f"\n–ù–∞–ø–∏—à–∏—Ç–µ   ==  ‚≠ïÔ∏è<b><u><code>–°—Ç–æ–ø</code></u></b>‚≠ïÔ∏è  ==   —á—Ç–æ–±—ã –í—ã–π—Ç–∏ ",
            parse_mode=ParseMode.HTML
        )

if __name__ == '__main__':
    executor.start_polling(dp)

